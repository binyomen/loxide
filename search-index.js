var searchIndex = JSON.parse('{\
"loxide":{"doc":"","t":[0,0,5,12,3,3,3,4,4,3,13,13,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["chunk","debug","test","0","Chunk","ChunkCursor","CodeByte","Instruction","OpCode","OpCodeIter","Return","Return","add_byte","as_byte","at_end","back_idx","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk","clone","clone","clone","clone_into","clone_into","clone_into","code","cursor","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from_byte","get","idx","into","into","into","into","into","into","into_iter","iter","len","marker","ne","new","new","next","next_back","nth","offset","offset","read_instruction","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","disassemble_chunk","disassemble_instruction"],"q":["loxide","","","loxide::chunk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","loxide::debug",""],"d":["Utilities for dealing with chunks of bytecode.","","","","A chunk of bytecode, representing a top-level program or a …","A cursor to give random access into the bytecode <code>Chunk</code>.","A single byte used in the interpreter’s bytecode. A …","A bytecode instruction, varying by opcode and including …","A byte representing an instruction in the interpreter’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Turns the given <code>CodeByte</code> into an <code>OpCode</code> effectively as a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,0,0,0,0,0,0,2,3,4,2,5,6,4,5,1,2,6,3,4,5,1,2,6,3,5,1,2,6,1,2,6,4,4,1,2,3,1,2,3,4,5,1,2,6,3,2,6,6,4,5,1,2,6,3,6,2,6,6,1,4,1,6,6,6,5,5,5,6,1,2,6,4,5,1,2,6,3,4,5,1,2,6,3,4,5,1,2,6,3,0,0],"f":[null,null,[[]],null,null,null,null,null,null,null,null,null,[[["codebyte",3]]],[[],["codebyte",3]],[[],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["codebyte",3]],[[],["opcode",4]],[[],["opcodeiter",3]],[[]],[[]],[[]],null,[[],["chunkcursor",3]],[[["codebyte",3]],["bool",15]],[[["opcode",4]],["bool",15]],[[["instruction",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["codebyte",3]]],[[["usize",15]],[["option",4,["opcode"]],["opcode",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["opcodeiter",3]],[[],["usize",15]],null,[[["codebyte",3]],["bool",15]],[[]],[[["u8",15]]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["usize",15]],null,[[],[["instruction",4],["option",4,["instruction"]]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["chunk",3]]],[[["usize",15],["instruction",4]]]],"p":[[3,"CodeByte"],[4,"OpCode"],[4,"Instruction"],[3,"Chunk"],[3,"ChunkCursor"],[3,"OpCodeIter"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};