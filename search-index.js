var searchIndex = JSON.parse('{\
"loxide":{"doc":"","t":[3,11,11,0,5,0,5,11,11,0,5,11,11,11,0,0,12,13,13,3,3,3,13,13,13,13,4,13,13,13,13,4,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,5,5,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,13,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,17,3,3,11,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11],"n":["LoxideError","borrow","borrow_mut","chunk","compile","debug","execute","from","into","lexer","test","try_from","try_into","type_id","value","vm","0","Add","Add","Chunk","ChunkCursor","CodeByte","Constant","Constant","Divide","Divide","Instruction","Multiply","Multiply","Negate","Negate","OpCode","OpCodeIter","Return","Return","Subtract","Subtract","add_add_instruction","add_byte","add_constant","add_constant_instruction","add_divide_instruction","add_multiply_instruction","add_negate_instruction","add_return_instruction","add_subtract_instruction","as_byte","at_end","back_idx","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk","clone","clone","clone","clone_into","clone_into","clone_into","code","constants","cursor","default","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from_byte","get","get_constant","idx","into","into","into","into","into","into","into_iter","iter","len","line_at_offset","lines","marker","ne","ne","new","new","next","next_back","nth","offset","offset","read_instruction","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","disassemble_chunk","disassemble_constant_instruction","disassemble_instruction","disassemble_simple_instruction","And","Bang","BangEqual","Class","Comma","Dot","Else","Eof","Equal","EqualEqual","Error","False","For","Fun","Greater","GreaterEqual","Identifier","If","LeftBrace","LeftParen","Less","LessEqual","Lexer","Minus","Nil","Number","Or","Plus","Print","Return","RightBrace","RightParen","Semicolon","Slash","Star","String","Super","This","Token","TokenType","True","Var","While","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_token","current_index","emitted_eof","eq","eq","fmt","fmt","from","from","from","get_current_token_string","into","into","into","into_iter","is_identifier_character","is_identifier_leading_character","lex_digits","lex_identifier","lex_number","lex_string","line_number","maybe_lex_keyword","ne","ne","new","new","next","scanner","scanner_next","scanner_next_if_eq","scanner_peek","scanner_peek_next","skip_whitespace","source_code","span","to_owned","token_start_index","token_type","token_type_from_identifier_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","Value","add","borrow","borrow_mut","clone","clone_into","divide","eq","fmt","from","into","multiply","ne","negate","new","subtract","to_owned","try_from","try_into","type_id","value_to_string","STACK_SIZE","ValueStack","Vm","borrow","borrow","borrow_mut","borrow_mut","chunk","cursor","data","execute_binary_operation","from","from","index","interpret","into","into","new","new","pop","push","stack","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["loxide","","","","","","","","","","","","","","","","loxide::chunk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","loxide::chunk::Instruction","loxide::debug","","","","loxide::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","loxide::lexer::TokenType","loxide::value","","","","","","","","","","","","","","","","","","","","","","loxide::vm","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A stand-in for a loxide error type.","","","Utilities for dealing with chunks of bytecode.","Compile the given source code into a bytecode …","Utilities to help debug the interpreter.","Execute the given bytecode. Errors indicate runtime errors.","","","","","","","","Utilities for dealing with Lox values.","","","","","A chunk of bytecode, representing a top-level program or a …","A cursor to give random access into the bytecode <code>Chunk</code>.","A single byte used in the interpreter’s bytecode. A …","","","","","A bytecode instruction, varying by opcode and including …","","","","","A byte representing an instruction in the interpreter’s …","","","","","","","","Add a constant to the chunk. This function returns the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Turns the given <code>CodeByte</code> into an <code>OpCode</code> effectively as a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Print out a disassembly of the given chunk.","","Print out a disassembly of the given instruction from the …","","","","","","","","","","","","Indicates an error during lexing, including the error …","","","","","","","","","","","","An iterator over Lox tokens for a source code string.","","","","","","","","","","","","","","","","A token produced by lexing a string of source code.","The type of a given token, with additional information …","","","","","","","","","","","","","","","","","","","","","","Get the source code string representing our current token …","","","","","Determines if the given character can be a part of an …","Determines if the given character can start an identifier. …","Scan through as long as we’re at an ASCII digit. This is …","Lex the next characters in the scanner into an identifier. …","Lex the next characters in the scanner as a number. The …","Lex the next characters in the scanner as a string. The …","","Try to lex the remainder of an identifier as a keyword. …","","","","","","","Return the next character from the scanner. We also update …","","","Peek one after next. This is done by cloning the scanner …","Skip over whitespace and comments in the source code, …","","","","","","Get the token type from an identifier string. This uses a …","","","","","","","","","","","","A Lox value as represented in the interpreter. For …","","","","","","","","","","","","","","","","","","","","","","A statically-sized stack that contains values during …","The actual virtual machine that executes Lox bytecode.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,0,0,0,0,1,1,0,0,1,1,1,0,0,2,3,4,0,0,0,3,4,3,4,0,3,4,3,4,0,0,3,4,3,4,5,5,5,5,5,5,5,5,5,3,6,7,5,6,2,3,7,4,5,6,2,3,7,4,6,2,3,7,2,3,7,5,5,5,5,2,3,4,2,3,4,5,6,2,3,7,4,3,7,5,7,5,6,2,3,7,4,7,3,7,5,5,7,2,4,5,2,7,7,7,6,6,6,7,2,3,7,5,6,2,3,7,4,5,6,2,3,7,4,5,6,2,3,7,4,8,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,9,9,9,10,9,11,10,9,11,9,9,10,10,10,9,11,9,11,10,9,11,10,10,9,11,10,10,10,10,10,10,10,11,10,9,11,10,11,10,10,10,10,10,10,10,10,11,9,10,11,10,10,9,11,10,9,11,10,9,11,12,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,14,15,14,15,15,15,14,15,14,15,14,15,14,15,14,15,14,14,15,14,15,14,15,14,15],"f":[null,[[]],[[]],null,[[["str",15]],[["usize",15],["loxideerror",3],["result",4,["usize","loxideerror"]]]],null,[[["usize",15]],[["result",4,["loxideerror"]],["loxideerror",3]]],[[]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15],["codebyte",3]]],[[["value",3]],["u8",15]],[[["usize",15],["u8",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["codebyte",3]],[[],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["codebyte",3]],[[],["opcode",4]],[[],["opcodeiter",3]],[[]],[[]],[[]],null,null,[[],["chunkcursor",3]],[[]],[[["codebyte",3]],["bool",15]],[[["opcode",4]],["bool",15]],[[["instruction",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["codebyte",3]]],[[["usize",15]],[["option",4,["opcode"]],["opcode",4]]],[[["u8",15]],["value",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["opcodeiter",3]],[[],["usize",15]],[[["usize",15]],["usize",15]],null,null,[[["codebyte",3]],["bool",15]],[[["instruction",4]],["bool",15]],[[]],[[["u8",15]]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["usize",15]],null,[[],[["option",4,["instruction"]],["instruction",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["chunk",3]]],[[["u8",15],["value",3]]],[[["usize",15],["instruction",4],["chunk",3]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["tokentype",4]],[[]],[[["tokentype",4]],["token",3]],null,null,[[["tokentype",4]],["bool",15]],[[["token",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[["char",15]],["bool",15]],[[["char",15]],["bool",15]],[[]],[[],["token",3]],[[],["token",3]],[[],["token",3]],[[["str",15]],["usize",15]],[[["tokentype",4]],["tokentype",4]],[[["tokentype",4]],["bool",15]],[[["token",3]],["bool",15]],[[["str",15]]],[[["usize",15],["tokentype",4],["range",3,["usize"]]]],[[],["option",4]],null,[[],[["option",4,["char"]],["char",15]]],[[["char",15]],[["option",4,["char"]],["char",15]]],[[],[["option",4,["char"]],["char",15]]],[[],[["option",4,["char"]],["char",15]]],[[]],null,null,[[]],null,null,[[["str",15]],["tokentype",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[["value",3]],["value",3]],[[]],[[]],[[],["value",3]],[[]],[[["value",3]],["value",3]],[[["value",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["value",3]],["value",3]],[[["value",3]],["bool",15]],[[],["value",3]],[[["f64",15]]],[[["value",3]],["value",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["value",3]],["string",3]],null,null,null,[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],null,[[],["result",4]],[[]],[[]],[[]],[[["chunk",3]]],[[],["value",3]],[[["value",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"LoxideError"],[3,"CodeByte"],[4,"OpCode"],[4,"Instruction"],[3,"Chunk"],[3,"ChunkCursor"],[3,"OpCodeIter"],[13,"Constant"],[4,"TokenType"],[3,"Lexer"],[3,"Token"],[13,"Error"],[3,"Value"],[3,"ValueStack"],[3,"Vm"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};