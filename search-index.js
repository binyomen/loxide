var searchIndex = JSON.parse('{\
"loxide":{"doc":"","t":[3,11,11,0,5,0,0,5,11,11,11,0,11,11,11,0,0,12,13,13,3,3,3,13,13,13,13,13,13,4,13,13,13,13,13,13,4,3,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,13,13,13,6,3,13,13,4,13,13,13,13,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,12,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,5,5,5,5,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,12,13,13,13,4,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,17,3,3,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11],"n":["LoxideError","borrow","borrow_mut","chunk","compile","compiler","debug","execute","from","from","into","lexer","try_from","try_into","type_id","value","vm","0","Add","Add","Chunk","ChunkCursor","CodeByte","Constant","Constant","Divide","Divide","False","False","Instruction","Multiply","Multiply","Negate","Negate","Nil","Nil","OpCode","OpCodeIter","Return","Return","Subtract","Subtract","True","True","add_add_instruction","add_byte","add_constant","add_constant_instruction","add_divide_instruction","add_false_instruction","add_multiply_instruction","add_negate_instruction","add_nil_instruction","add_return_instruction","add_subtract_instruction","add_true_instruction","as_byte","at_end","back_idx","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk","clone","clone","clone","clone_into","clone_into","clone_into","code","constants","cursor","default","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from_byte","get","get_constant","idx","into","into","into","into","into","into","into_iter","iter","len","line_at_offset","lines","marker","ne","ne","new","new","next","next_back","nth","offset","offset","previous_line","read_instruction","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","And","Assignment","Base","Call","Comparison","CompilationFunction","Compiler","Equality","Factor","InfixOperatorPrecedence","Or","Primary","Term","Unary","add_constant","add_one","add_simple_instruction","borrow","borrow","borrow_mut","borrow_mut","chunk","cmp","compile","compile_binary_expression","compile_expression","compile_grouping","compile_keyword_literal","compile_number","compile_unary_expression","create_eof_token","eq","expect_token_type","finalize_and_return","fmt","from","from","get_infix_compilation_function","get_infix_operator_precedence","get_prefix_compilation_function","had_error","in_panic_mode","into","into","lexer","line_number","new","next_token","parse_with_precedence","partial_cmp","peek_next_token","peeked_token","print_error","report_error","token_string","try_from","try_from","try_into","try_into","type_id","type_id","disassemble_chunk","disassemble_constant_instruction","disassemble_instruction","disassemble_simple_instruction","And","Bang","BangEqual","Class","Comma","Dot","Else","Eof","Equal","EqualEqual","Error","False","For","Fun","Greater","GreaterEqual","Identifier","If","LeftBrace","LeftParen","Less","LessEqual","Lexer","Minus","Nil","Number","Or","Plus","Print","Return","RightBrace","RightParen","Semicolon","Slash","Star","String","Super","This","Token","TokenType","True","Var","While","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_token","current_index","current_token_string","emitted_eof","eq","eq","fmt","fmt","from","from","from","into","into","into","into_iter","is_identifier_character","is_identifier_leading_character","lex_digits","lex_identifier","lex_number","lex_string","line_number","maybe_lex_keyword","ne","ne","new","new","next","scanner","scanner_next","scanner_next_if_eq","scanner_peek","scanner_peek_next","skip_whitespace","source_code","source_code","span","to_owned","to_owned","token_start_index","token_string","token_type","token_type_from_identifier_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","Bool","Nil","Number","Value","add","borrow","borrow_mut","check_operand_types","clone","clone_into","divide","eq","fmt","from","into","multiply","ne","negate","subtract","to_owned","try_from","try_into","type_id","value_to_string","0","0","STACK_SIZE","ValueStack","Vm","borrow","borrow","borrow_mut","borrow_mut","chunk","cursor","data","execute_binary_operation","execute_unary_operation","from","from","index","interpret","interpret_inner","into","into","new","new","peek","pop","push","reset","stack","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["loxide","","","","","","","","","","","","","","","","","loxide::chunk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","loxide::chunk::Instruction","loxide::compiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","loxide::debug","","","","loxide::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","loxide::lexer::TokenType","loxide::value","","","","","","","","","","","","","","","","","","","","","","","","loxide::value::Value","","loxide::vm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A stand-in for a loxide error type.","","","Utilities for dealing with chunks of bytecode.","Compile the given source code into a bytecode …","Utilities for compiling source code into bytecode chunks.","Utilities to help debug the interpreter.","Execute the given bytecode. Errors indicate runtime errors.","","","","Utilities for lexing source code into tokens.","","","","Utilities for dealing with Lox values.","The virtual machine which runs the compiled bytecode.","","","","A chunk of bytecode, representing a top-level program or a …","A cursor to give random access into the bytecode <code>Chunk</code>.","A single byte used in the interpreter’s bytecode. A …","","","","","","","A bytecode instruction, varying by opcode and including …","","","","","","","A byte representing an instruction in the interpreter’s …","","","","","","","","","","Add a constant to the chunk. This function returns the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Turns the given <code>CodeByte</code> into an <code>OpCode</code> effectively as a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An alias for a function used in compilation. It takes in a …","The data type which manages compilation from source code …","","","Precedences for various infix operators. Values defined …","","","","","","Return a new precedence that’s one level higher than the …","Add an instruction that doesn’t take any operands.","","","","","","","Compile the source code represented by the given Lexer …","Compile expressions that contain binary infix operators …","Compile top level expressions.","Compile parenthesis groupings.","Compiles literals that are represented by keywords.","","Compile expressions that start with unary operators like …","","","Report an error if the next token isn’t of the given …","After compilation has finished, run any remaining code and …","","","","","","","","","","","","","","","Parse the upcoming tokens using a given infix operator …","","","","","Report an error with the given message on the given token. …","","","","","","","","Print out a disassembly of the given chunk.","","Print out a disassembly of the given instruction from the …","","","","","","","","","","","","Indicates an error during lexing, including the error …","","","","","","","","","","","","An iterator over Lox tokens for a source code string.","","","","","","","","","","","","","","","","A token produced by lexing a string of source code.","The type of a given token, with additional information …","","","","","","","","","","","","","","","","Get the source code string representing our current token …","","","","","","","","","","","","","Determines if the given character can be a part of an …","Determines if the given character can start an identifier. …","Scan through as long as we’re at an ASCII digit. This is …","Lex the next characters in the scanner into an identifier. …","Lex the next characters in the scanner as a number. The …","Lex the next characters in the scanner as a string. The …","","Try to lex the remainder of an identifier as a keyword. …","","","","","","","Return the next character from the scanner. We also update …","","","Peek one after next. This is done by cloning the scanner …","Skip over whitespace and comments in the source code, …","","","","","","","","","Get the token type from an identifier string. This uses a …","","","","","","","","","","","","","","A Lox value as represented in the interpreter. For …","","","","Validates that the operands to the <code>Value</code> operation are of …","","","","","","","","","","","","","","","","","","","","A statically-sized stack that contains values during …","The actual virtual machine that executes Lox bytecode.","","","","","","","","","","","","","","","","","","","Peek into the <code>ValueStack</code> at the given index. Panics if the …","","","","","","","","","",""],"i":[0,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,0,2,3,4,0,0,0,3,4,3,4,3,4,0,3,4,3,4,3,4,0,0,3,4,3,4,3,4,5,5,5,5,5,5,5,5,5,5,5,5,3,6,7,5,6,2,3,7,4,5,6,2,3,7,4,6,2,3,7,2,3,7,5,5,5,5,2,3,4,2,3,4,5,6,2,3,7,4,3,7,5,7,5,6,2,3,7,4,7,3,7,5,5,7,2,4,5,2,7,7,7,6,6,6,6,7,2,3,7,5,6,2,3,7,4,5,6,2,3,7,4,5,6,2,3,7,4,8,9,9,9,9,9,0,0,9,9,0,9,9,9,9,10,9,10,10,9,10,9,10,9,10,10,10,10,10,10,10,10,9,10,10,9,10,9,10,0,10,10,10,10,9,10,10,10,10,10,9,10,10,10,10,10,10,9,10,9,10,9,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,12,11,13,12,11,13,11,13,11,13,12,12,12,12,11,13,11,13,12,11,13,12,11,13,12,12,12,12,12,12,12,13,12,11,13,12,13,12,12,12,12,12,12,12,12,12,13,11,13,12,13,13,12,12,11,13,12,11,13,12,11,13,14,15,15,15,0,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,16,17,0,0,0,18,19,18,19,19,19,18,19,19,18,19,18,19,19,18,19,18,19,18,18,18,18,19,18,19,18,19,18,19],"f":[null,[[]],[[]],null,[[["str",15]],[["chunk",3],["loxideerror",3],["result",4,["chunk","loxideerror"]]]],null,null,[[["chunk",3]],[["loxideerror",3],["result",4,["loxideerror"]]]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15],["codebyte",3]]],[[["value",4]],[["u8",15],["option",4,["u8"]]]],[[["usize",15],["u8",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["codebyte",3]],[[],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["codebyte",3]],[[],["opcode",4]],[[],["opcodeiter",3]],[[]],[[]],[[]],null,null,[[],["chunkcursor",3]],[[]],[[["codebyte",3]],["bool",15]],[[["opcode",4]],["bool",15]],[[["instruction",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["codebyte",3]]],[[["usize",15]],[["opcode",4],["option",4,["opcode"]]]],[[["u8",15]],["value",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["opcodeiter",3]],[[],["usize",15]],[[["usize",15]],["usize",15]],null,null,[[["codebyte",3]],["bool",15]],[[["instruction",4]],["bool",15]],[[]],[[["u8",15]]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["usize",15]],null,[[],["usize",15]],[[],[["option",4,["instruction"]],["instruction",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["value",4],["token",3]],["u8",15]],[[]],[[["token",3]]],[[]],[[]],[[]],[[]],null,[[["infixoperatorprecedence",4]],["ordering",4]],[[],[["chunk",3],["result",4,["chunk"]]]],[[["token",3]]],[[]],[[["token",3]]],[[["token",3]]],[[["token",3]]],[[["token",3]]],[[],["token",3]],[[["infixoperatorprecedence",4]],["bool",15]],[[["str",15],["tokentype",4]],[["token",3],["option",4,["token"]]]],[[],[["chunk",3],["result",4,["chunk"]]]],[[["formatter",3]],["result",6]],[[]],[[]],[[["tokentype",4]],["option",4]],[[["tokentype",4]],["infixoperatorprecedence",4]],[[["tokentype",4]],["option",4]],null,null,[[]],[[]],null,[[["token",3]],["usize",15]],[[["lexer",3]]],[[],[["token",3],["option",4,["token"]]]],[[["infixoperatorprecedence",4]]],[[["infixoperatorprecedence",4]],[["option",4,["ordering"]],["ordering",4]]],[[],[["token",3],["option",4,["token"]]]],null,[[["arguments",3]]],[[["str",15]]],[[["token",3]],["str",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["chunk",3]]],[[["value",4],["u8",15]]],[[["usize",15],["chunk",3],["instruction",4]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["tokentype",4]],[[],["token",3]],[[]],[[]],[[["tokentype",4]],["token",3]],null,[[],["str",15]],null,[[["tokentype",4]],["bool",15]],[[["token",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["char",15]],["bool",15]],[[["char",15]],["bool",15]],[[]],[[],["token",3]],[[],["token",3]],[[],["token",3]],[[["str",15]],["usize",15]],[[["tokentype",4]],["tokentype",4]],[[["tokentype",4]],["bool",15]],[[["token",3]],["bool",15]],[[["str",15]]],[[["usize",15],["tokentype",4],["range",3,["usize"]]]],[[],["option",4]],null,[[],[["char",15],["option",4,["char"]]]],[[["char",15]],[["char",15],["option",4,["char"]]]],[[],[["char",15],["option",4,["char"]]]],[[],[["char",15],["option",4,["char"]]]],[[]],[[],["str",15]],null,null,[[]],[[]],null,[[["str",15]],["str",15]],null,[[["str",15]],["tokentype",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[["value",4]],[["value",4],["string",3],["result",4,["value","string"]]]],[[]],[[]],null,[[],["value",4]],[[]],[[["value",4]],[["value",4],["string",3],["result",4,["value","string"]]]],[[["value",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["value",4]],[["value",4],["string",3],["result",4,["value","string"]]]],[[["value",4]],["bool",15]],[[],[["value",4],["string",3],["result",4,["value","string"]]]],[[["value",4]],[["value",4],["string",3],["result",4,["value","string"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["value",4]],["string",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,[[],[["string",3],["result",4,["string"]]]],[[],[["string",3],["result",4,["string"]]]],[[]],[[]],null,[[],["result",4]],[[],[["string",3],["result",4,["string"]]]],[[]],[[]],[[]],[[["chunk",3]]],[[["usize",15]],["value",4]],[[],["value",4]],[[["value",4]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"LoxideError"],[3,"CodeByte"],[4,"OpCode"],[4,"Instruction"],[3,"Chunk"],[3,"ChunkCursor"],[3,"OpCodeIter"],[13,"Constant"],[4,"InfixOperatorPrecedence"],[3,"Compiler"],[4,"TokenType"],[3,"Lexer"],[3,"Token"],[13,"Error"],[4,"Value"],[13,"Number"],[13,"Bool"],[3,"ValueStack"],[3,"Vm"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};